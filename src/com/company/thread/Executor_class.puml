@startuml

interface Runnable {
    void run()
}

interface Callable<V> {
    V call() throws Exception;
}

interface Future<V> {
    boolean cancel(boolean interrupt);
    boolean isCancelled();
    boolean isDone();
    V get() throws \n InterruptedException, \n ExecutionException;
    V get(long timeout, TimeUnit unit) \n throws InterruptedException, \n ExecutionException,\n TimeoutException;
}

interface RunnableFuture<V> {
    void run();
}

Runnable <|-- RunnableFuture
Callable <|-- RunnableFuture

class FutureTask<V> {
    private volatile int state;
    private static final int NEW          = 0;
    private static final int COMPLETING   = 1;
    private static final int NORMAL       = 2;
    private static final int EXCEPTIONAL  = 3;
    private static final int CANCELLED    = 4;
    private static final int INTERRUPTING = 5;
    private static final int INTERRUPTED  = 6;

    private Object outcome;

}

RunnableFuture <|.. FutureTask


interface Executor {
    void execute(Runnable)
}

interface ExecutorService{
    <T> Future<T> submit(Callable<T> task);
    <T> Future<T> submit(Runnable task, T result);
    Future<?> submit(Runnable task);
    void shutdown();
    List<Runnable> shutdownNow();
    boolean isShutdown();
}

Executor <|-- ExecutorService

abstract class AbstractExecutorService {
}

ExecutorService <|.. AbstractExecutorService

class ThreadPoolExecutor {
}

AbstractExecutorService <|-- ThreadPoolExecutor

@enduml